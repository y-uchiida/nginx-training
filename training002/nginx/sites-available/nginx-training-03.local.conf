server{
    listen       80;
    listen  [::]:80;
    server_name  nginx-training-03.local;

    root /var/www/public/nginx-training-03.local;

	location / { }

    #1. 別のディレクトリへ遷移させる
    location /old {
        # old ディレクトリへのアクセスをすべてnew ディレクトリへ転送する
        rewrite ^/old(.*)$ $http_host/new$1 permanent; # paermanent での遷移はステータスコード301になる
    }

    # 末尾の "/" がないとき、これを補う
    # この設定がないと、ポート番号の設定が維持されないため。
    location /new {
        rewrite ^(.*)$ http://$http_host/new/ last;
    }

    # location /new でのrewriteで無限ロープに陥らないように、
    # location /new/ を明示的に記述して処理を分岐させる。
    # 通常の記述であれば、最長の前方一致条件が適用されるので、 /new/.* のURLは
    # location /new のrewriteの対象にならない
    location /new/ { }

    #2. 連続したリダイレクトの制御
    #  フラグで、URLを書き換えた後の動作を決定できる。
    #  Apacheとちがって4種類しかない。
    #  last と break の使い分けがキモになるようす。

    # page01もpage02も、最終的にpage03が表示されるパターン
    location /redirect_chain01 {
        rewrite ^(.*)$ http://$http_host/redirect_chain01/ last;
    }
    location /redirect_chain01/ {
        rewrite page01\.html http://$http_host/redirect_chain01/page02.html last; # page01 から page02 へ遷移させる
        rewrite page02\.html http://$http_host/redirect_chain01/page03.html last; # page02 から page03 へ遷移させる
    }

    # no-redirectのパラメータがあるときは遷移させないパターン
    location /redirect_chain02 {
        rewrite ^(.*)$ http://$http_host/redirect_chain02/ last;
    }
    location /redirect_chain02/ {
        #no-redirect パラメータががついているとき、rewriteせずにリクエストされたページを応答する
        if ($args ~ "no-redirect(.*)") {
            rewrite (.*) $1 break; # breakなので、以降のrewrite ディレクティブの評価を行わない
        }

        rewrite page01\.html $scheme://$http_host/redirect_chain02/page02.html last; # page01 から page02 へ遷移させる
        rewrite page02\.html $scheme://$http_host/redirect_chain02/page03.html last; # page02 から page03 へ遷移させる
    }
}